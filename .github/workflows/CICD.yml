# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Build:
    runs-on: ubuntu-latest
    environment: 
      name: dev # If there are build parammeters then use this. (this is different from CDK parameters, they come later.)
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node modules
        id: node_cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Install dependencies of not cached
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: yarn install
      - run: npm run build --if-present

  Validate_Stack:
    name: Validate Cfn Stack
    runs-on: ubuntu-latest
    environment: 
      name: dev
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node modules
        id: node_cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Install dependencies of not cached
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: yarn install
 
      - name: CDK Synth
        uses: scottbrenner/aws-cdk-action@master
        with:
          args: synth
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          APIG_STAGE_NAME: ${{ secrets.APIG_STAGE_NAME }}
          SUB_DOMAIN: ${{ secrets.SUB_DOMAIN }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          MESSAGE_STRING: ${{ secrets.MESSAGE_STRING }}
          CREATE_ROUTE53_HOSTED_ZONE: ${{ secrets.CREATE_ROUTE53_HOSTED_ZONE }}

  DeployDev:
    name: Deploy to Dev 
    if: github.event_name == 'pull_request'
    needs: [Build, Validate_Stack]
    runs-on: ubuntu-latest
    environment: 
      name: dev
      url: 'http://apigw.iharshit.site'
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node modules
        id: node_cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Install dependencies of not cached
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: yarn install

      - name: CDK Deploy Dev
        uses: scottbrenner/aws-cdk-action@master
        with:
          args: diff # deploy to Dev
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          APIG_STAGE_NAME: ${{ secrets.APIG_STAGE_NAME }}
          SUB_DOMAIN: ${{ secrets.SUB_DOMAIN }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          MESSAGE_STRING: ${{ secrets.MESSAGE_STRING }}
          CREATE_ROUTE53_HOSTED_ZONE: ${{ secrets.CREATE_ROUTE53_HOSTED_ZONE }}

  DeployStaging:
    name: Deploy to Staging 
    if: github.event.ref == 'refs/heads/main'
    needs: [Build, Validate_Stack]
    runs-on: ubuntu-latest
    environment: 
      name: dev
      url: 'http://apigw.iharshit.site'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node modules
        id: node_cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Install dependencies of not cached
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: yarn install

      - name: CDK Deploy to Stage
        uses: scottbrenner/aws-cdk-action@master
        with:
          args: diff # deploy to stage
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          APIG_STAGE_NAME: ${{ secrets.APIG_STAGE_NAME }}
          SUB_DOMAIN: ${{ secrets.SUB_DOMAIN }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          MESSAGE_STRING: ${{ secrets.MESSAGE_STRING }}
          CREATE_ROUTE53_HOSTED_ZONE: ${{ secrets.CREATE_ROUTE53_HOSTED_ZONE }}

  DeployProd:
    name: Deploy to Production 
    needs: [DeployStaging]
    runs-on: ubuntu-latest
    environment: 
      name: dev
      url: 'http://www.myapp.com'
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node modules
        id: node_cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: Install dependencies of not cached
        if: steps.node-cache.outputs.cache-hit != 'true'
        run: yarn install

      - name: CDK Deploy Prod
        uses: scottbrenner/aws-cdk-action@master
        with:
          args: diff # deploy to prod
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          APIG_STAGE_NAME: ${{ secrets.APIG_STAGE_NAME }}
          SUB_DOMAIN: ${{ secrets.SUB_DOMAIN }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          MESSAGE_STRING: ${{ secrets.MESSAGE_STRING }}
          CREATE_ROUTE53_HOSTED_ZONE: ${{ secrets.CREATE_ROUTE53_HOSTED_ZONE }}
      
